const xlabels = ['From sensor A', 'From sensor B']
var currentMax = 20;
var oldData;
const config = {
    type: 'bar',
    data: {
        labels: xlabels,
        datasets: [
            {
              label: 'Regular',
              backgroundColor: '#f87979',
            //   data: meterRegular
            },
            {
              label: 'Forward (generated by C)',
              backgroundColor: '#ff0088',
            //   data: meterForward
            }
          ]
    },

    options: {
        scales: {
            yAxes: [{
                    display: true,
                    ticks: {
                        beginAtZero: true,
                        steps: 5,
                        stepValue: 5,
                        max: currentMax
                    }
                }]
        }
    }
}

const ctx = document.getElementById('myChart').getContext('2d');
const chart = new Chart(ctx, config);
updateChart()


function updateChart(){
    async function fetchData(){
        const apiUrl = "http://127.0.0.1:8000/meter_status";
        const response = await fetch(apiUrl);
        const barChartData = await response.json();
        return barChartData;
    }

    fetchData().then(barChartData => { 
        const barChartRegular = barChartData.regular;
        const barChartForward = barChartData.forward;
        const messageEvent = barChartData.last_event;

        chart.config.data.datasets[0].data = barChartRegular;
        chart.config.data.datasets[1].data = barChartForward;
        function checkMax(barChartRegular, barChartForward){
            console.log(barChartRegular)
            if (barChartRegular.some(el => el > currentMax)){
                currentMax = Math.max.apply(Math, barChartRegular) + 20;
                chart.config.options.scales.yAxes[0].ticks.max = currentMax;
            }
            if (barChartForward.some(el => el > currentMax)){
                currentMax = Math.max.apply(Math, barChartForward) + 20;
                chart.config.options.scales.yAxes[0].ticks.max = currentMax;
            }
        }
        checkMax(barChartRegular, barChartForward)
        chart.update();

        if(!_.isEqual(barChartData, oldData)){
            notifyEvent(messageEvent);
        }
        oldData = barChartData;
    })
};
setInterval(updateChart, 5000);

function notifyEvent(text) {
    var snackBar = document.getElementById("snackbar");
    var event_txt = document.getElementById("last_event_txt");  
    snackBar.className = "show";
    snackBar.textContent = text;
    event_txt.textContent = "Last event: " + text;
  
    setTimeout(function(){ snackBar.className = snackBar.className.replace("show", ""); }, 3000);
  }
